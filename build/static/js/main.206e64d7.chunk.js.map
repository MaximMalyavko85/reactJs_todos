{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContaxt.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/firebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","Fragment","About","Navbar","to","exact","activeClassName","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","AlertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebasereducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.206e64d7.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const AlertContext = createContext();\n","import {createContext} from 'react';\n\nexport const FirebaseContext = createContext();","import React, { useState, useContext } from \"react\";\nimport { AlertContext } from \"../context/alert/alertContext\";\nimport { FirebaseContext } from \"../context/firebase/firebaseContaxt\";\n\nexport const Form = () => {\n  const [value, setValue] = useState(\"\");\n  const alert = useContext(AlertContext);\n  const firebase = useContext(FirebaseContext);\n\n  const submitHandler = event => {\n    event.preventDefault();\n    if (value.trim()) {\n      firebase\n        .addNote(value.trim())\n        .then(() => {\n          alert.show(\"Заметка была создана\", \"success\");\n        })\n        .catch(() => {\n          alert.show(\"Что-то пошло не так\", \"danger\");\n        });\n      setValue(\"\");\n    } else {\n      alert.show(\"Введите название заметкм\", \"warning\");\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"form-group\">\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          placeholder=\"Введите название заметки\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nexport const Notes = ({ notes, onRemove }) => (\n  <TransitionGroup component=\"ul\" className=\"list-group\">\n    {notes.map(note => (\n      <CSSTransition \n        key={note.id}\n        classNames={\"note\"}\n        timeout={800}\n        >\n        <li className=\"list-group-item note\">\n          <div>\n            <strong>{note.title}</strong>\n            <small>{note.date}</small>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-danger btn-sm\"\n            onClick={() => onRemove(note.id)}\n          >\n            &times;\n          </button>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n","import React from \"react\";\n\nexport const Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n","import React, { useContext, useEffect } from \"react\";\nimport { Form } from \"../components/Form\";\nimport { Notes } from \"../components/Notes\";\nimport { FirebaseContext } from \"../context/firebase/firebaseContaxt\";\nimport { Loader } from \"../components/Loader\";\nimport { AlertContext } from \"../context/alert/alertContext\";\n\nexport const Home = () => {\n  const { loading, notes, fetchNotes, removeNote } = useContext(\n    FirebaseContext\n  );\n\n  const alert = useContext(AlertContext);\n\n  useEffect(() => {\n    fetchNotes();\n    // eslint-disable-next-line\n  }, []);\n\n  const remove = id => {\n    removeNote(id)\n      .then(() => alert.show(\"Заметка удалена\", \"success\"))\n      .catch(() => alert.show(\"Что-то пошло не так\", \"danger\"));\n  };\n\n  return (\n    <React.Fragment>\n      <Form />\n      <hr />\n      {loading ? <Loader /> : <Notes notes={notes} onRemove={remove} />}\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nexport const About = () => (\n  <div className=\"jumbotron\">\n    <div className=\"container\">\n      <h1 className=\"display-4\">Лучшее React приложение</h1>\n      <p className=\"lead\">\n        Версия приложение <strong>1.0.79</strong>\n      </p>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const Navbar = () => (\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n    <div className=\"navbar-brand\">Note app</div>\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item active\">\n        <NavLink className=\"nav-link\" to=\"/\" exact={true} activeClassName='is-active'>\n          Главная\n        </NavLink>\n      </li>\n      <li className=\"nav-item active\">\n        <NavLink className=\"nav-link\" to=\"/about\" activeClassName='is-active'>\n          Информация\n        </NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n","import React, { useContext } from \"react\";\nimport { AlertContext } from \"../context/alert/alertContext\";\nimport { CSSTransition } from \"react-transition-group\";\n\nexport const Alert = () => {\n  const { alert, hide } = useContext(AlertContext);\n\n  //if (!alert.visible) return null;\n\n  return (\n    <CSSTransition\n      in={alert.visible}\n      timeout={{\n        enter: 500,\n        exit: 350\n      }}\n      classNames={\"alert\"}\n      mountOnEnter\n      unmountOnExit\n    >\n      <div\n        className={`alert alert-${alert.type || \"warning\"} alert-dismissible`}\n      >\n        <strong>Внимание!</strong>\n        &nbsp;{alert.text}\n        <button\n          onClick={hide}\n          type=\"button\"\n          className=\"close\"\n          aria-label=\"Close\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </CSSTransition>\n  );\n};\n","import { SHOW_ALERT, HIDE_ALERT } from \"../types\";\n\nconst handlers = {\n  [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\n  [HIDE_ALERT]: state => ({...state, visible: false}),\n  DEFAULT: state => state\n};\n\nexport const AlertReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT; // создается handle по ключу action.type\n\n  return handle(state, action);\n};\n","export const SHOW_ALERT = \"SHOW-ALER\";\nexport const HIDE_ALERT = \"HIDE-ALER\";\n\nexport const SHOW_LOADER = \"SHOW_LOADER\";\nexport const ADD_NOTE = \"ADD_NOTE\";\nexport const FETCH_NOTES = \"FETCH_NOTES\";\nexport const REMOVE_NOTE = \"REMOVE_NOTE\";\n","import React, { useReducer } from \"react\";\nimport { AlertContext } from \"./alertContext\";\nimport { AlertReducer } from \"./alertReducer\";\nimport { SHOW_ALERT, HIDE_ALERT } from \"../types\";\n\nexport const AlertState = ({ children }) => {\n  const [state, dispatch] = useReducer(AlertReducer, { visible: false });\n\n  const show = (text, type = \"warning\") => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: { text, type }\n    });\n  };\n\n  const hide = () => dispatch({ type: HIDE_ALERT });\n\n  return (\n    <AlertContext.Provider value={{ show, hide, alert: state }}>\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import { SHOW_LOADER, ADD_NOTE, FETCH_NOTES, REMOVE_NOTE } from \"../types\";\n\nconst handlers = {\n  [SHOW_LOADER]: state => ({ ...state, loading: true }),\n\n  [ADD_NOTE]: (state, { payload }) => ({\n    ...state,\n    notes: [...state.notes, payload]\n  }),\n\n  [FETCH_NOTES]: (state, { payload }) => ({\n    ...state,\n    notes: payload,\n    loading: false\n  }),\n\n  [REMOVE_NOTE]: (state, { payload }) => ({\n    ...state,\n    notes: state.notes.filter(note => note.id !== payload)\n  }),\n\n  DEFAULT: state => state\n};\n\nexport const firebasereducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT;\n  return handle(state, action);\n};\n","import React, { useReducer, useContext } from \"react\";\nimport { FirebaseContext } from \"./firebaseContaxt\";\nimport { firebasereducer } from \"./firebaseReducer\";\nimport axios from \"axios\";\nimport { SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES } from \"../types\";\n\nconst url = process.env.REACT_APP_DB_URL;\n\nexport const FirebaseState = ({ children }) => {\n\n  const initialState = {\n    notes: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(firebasereducer, initialState);\n\n  const showLoader = () => {\n    dispatch({ type: SHOW_LOADER });\n  };\n\n  const fetchNotes = async () => {\n    showLoader();\n    const res = await axios.get(`${url}/notes.json`);\n    const payload = Object.keys(res.data).map(key => {\n      return {\n        ...res.data[key],\n        id: key\n      };\n    });\n\n    dispatch({ type: FETCH_NOTES, payload });\n  };\n\n  const addNote = async title => {\n    const note = {\n      title,\n      date: new Date().toJSON()\n    };\n\n    try {\n      const res = await axios.post(`${url}/notes.json`, note);\n      const payload = {\n        ...note,\n        id: res.data.name\n      };\n\n      dispatch({ type: ADD_NOTE, payload });\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const removeNote = async id => {\n    try {\n      await axios.delete(`${url}/notes/${id}.json`);\n\n      dispatch({\n        type: REMOVE_NOTE,\n        payload: id\n      });\n    } catch (e) {\n      throw Error(e.message);\n    }\n  };\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        showLoader,\n        addNote,\n        removeNote,\n        fetchNotes,\n        loading: state.loading,\n        notes: state.notes\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./pages/Home\";\nimport { About } from \"./pages/About\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Alert } from \"./components/Alert\";\nimport { AlertState } from \"./context/alert/AlertState\";\nimport { FirebaseState } from \"./context/firebase/firebaseState\";\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar />\n          <div className=\"container pt-4\">\n            <Alert />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/about\" component={About} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}